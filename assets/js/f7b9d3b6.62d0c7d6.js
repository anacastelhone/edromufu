"use strict";(self.webpackChunkedrom=self.webpackChunkedrom||[]).push([[6144],{3905:(e,r,a)=>{a.d(r,{Zo:()=>m,kt:()=>f});var o=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function t(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?t(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,o,n=function(e,r){if(null==e)return{};var a,o,n={},t=Object.keys(e);for(o=0;o<t.length;o++)a=t[o],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)a=t[o],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=o.createContext({}),c=function(e){var r=o.useContext(d),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},m=function(e){var r=c(e.components);return o.createElement(d.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},l=o.forwardRef((function(e,r){var a=e.components,n=e.mdxType,t=e.originalType,d=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),l=n,f=u["".concat(d,".").concat(l)]||u[l]||p[l]||t;return a?o.createElement(f,i(i({ref:r},m),{},{components:a})):o.createElement(f,i({ref:r},m))}));function f(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var t=a.length,i=new Array(t);i[0]=l;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<t;c++)i[c]=a[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}l.displayName="MDXCreateElement"},3606:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var o=a(7462),n=(a(7294),a(3905));const t={id:"recording_from_camera",title:"Gravando as imagens",sidebar_position:2},i=void 0,s={unversionedId:"Vis\xe3o/Treinamento da rede neural/recording_from_camera",id:"Vis\xe3o/Treinamento da rede neural/recording_from_camera",title:"Gravando as imagens",description:"Para obter as imagens para o treinamento, primeiro gravamos v\xeddeos utilizando a c\xe2mera que futuramente ser\xe1 usada no projeto. Para isso, conectamos a c\xe2mera em um USB e executamos o seguinte script:",source:"@site/docs/Vis\xe3o/Treinamento da rede neural/recording_from_camera.md",sourceDirName:"Vis\xe3o/Treinamento da rede neural",slug:"/Vis\xe3o/Treinamento da rede neural/recording_from_camera",permalink:"/edromufu/docs/Vis\xe3o/Treinamento da rede neural/recording_from_camera",draft:!1,editUrl:"https://github.com/edromufu/edromufu/tree/master/edrom-docs/docs/Vis\xe3o/Treinamento da rede neural/recording_from_camera.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"recording_from_camera",title:"Gravando as imagens",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introdu\xe7\xe3o",permalink:"/edromufu/docs/Vis\xe3o/Treinamento da rede neural/introducao"},next:{title:"Dividir os v\xeddeos em frames",permalink:"/edromufu/docs/Vis\xe3o/Treinamento da rede neural/spliting_video_in_frames"}},d={},c=[],m={toc:c},u="wrapper";function p(e){let{components:r,...a}=e;return(0,n.kt)(u,(0,o.Z)({},m,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Para obter as imagens para o treinamento, primeiro gravamos v\xeddeos utilizando a c\xe2mera que futuramente ser\xe1 usada no projeto. Para isso, conectamos a c\xe2mera em um USB e executamos o seguinte script:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'import os\nimport cv2\n\nvideoInput = "/dev/video2" # \xc9 de onde vai pegar as imagens, "/dev/video2" \xe9 pegando por um dos usbs (o numero muda) e 0 \xe9 a webcam\nwidth = 640 # Largura da imagem (conferir no v\xeddeo)\nheight = 480 # Altura da imagem (Conferir no v\xeddeo)\npasta = "videos" # Pasta para salvar os videos\n\nos.chdir(pasta)\nlista_de_arquivo = os.listdir(os.getcwd())\nfor i in range(len(lista_de_arquivo)):\n    if not lista_de_arquivo.__contains__("film"+str(i+1)+".avi"):\n        videoName = "film"+str(i+1)+".avi"\n        break\nos.chdir("..")\n\nfourcc = cv2.VideoWriter_fourcc(*\'XVID\')\nescritor = cv2.VideoWriter(os.path.join(os.getcwd(), pasta) + videoName, fourcc, 5.0, (width, height))\n\ncap = cv2.VideoCapture(videoInput)\n\nwhile True:\n    _ , frame = cap.read()\n    cv2.imshow("Camera", frame)\n    escritor.write(frame)\n    if cv2.waitKey(1) == ord("q"):\n        cap.release()\n        cv2.destroyAllWindows()\n')),(0,n.kt)("p",null,"A primeira parte \xe9 onde s\xe3o definidos os par\xe2metros. Modifique eles de acordo com a USB que estiver conectada a c\xe2mera (ou 0 para a webcam), o tamanho dos frames desejados e a pasta destino dos v\xeddeos."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'videoInput = "/dev/video2" # \xc9 de onde vai pegar as imagens, "/dev/video2" \xe9 pegando por um dos usbs (o numero muda) e 0 \xe9 a webcam\nwidth = 640 # Largura da imagem (conferir no v\xeddeo)\nheight = 480 # Altura da imagem (conferir no v\xeddeo)\npasta = "videos" # Pasta para salvar os videos\n')),(0,n.kt)("p",null,'Em seguida, \xe9 definido o nome do arquivo do v\xeddeo para n\xe3o sobrescrever v\xeddeos antigos (permitindo a grava\xe7\xe3o de multiplos v\xeddeos em sequ\xeancia) seguindo o padr\xe3o "film0.avi", "film1.avi", ..., "filmN.avi".'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'os.chdir(pasta)\nlista_de_arquivo = os.listdir(os.getcwd())\nfor i in range(len(lista_de_arquivo)):\n    if not lista_de_arquivo.__contains__("film"+str(i+1)+".avi"):\n        videoName = "film"+str(i+1)+".avi"\n        break\nos.chdir("..")\n')),(0,n.kt)("p",null,"Por fim, configura o escritor do OpenCV e realiza a captura das imagens, frame por frame, salvando o v\xeddeo na pasta configurada, com o nome determinado."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'fourcc = cv2.VideoWriter_fourcc(*\'XVID\')\nescritor = cv2.VideoWriter(os.path.join(os.getcwd(), pasta) + videoName, fourcc, 5.0, (width, height))\n\ncap = cv2.VideoCapture(videoInput)\n\nwhile True:\n    _ , frame = cap.read()\n    cv2.imshow("Camera", frame)\n    escritor.write(frame)\n    if cv2.waitKey(1) == ord("q"):\n        cap.release()\n        cv2.destroyAllWindows()\n')),(0,n.kt)("p",null,'Para iniciar a grava\xe7\xe3o, basta executar o script. Apertar a tecla "q" ir\xe1 finaliza-la. O resultado ser\xe1 um v\xeddeo em formato avi na pasta designada (no c\xf3digo exemplo, o script est\xe1 no mesmo diret\xf3rio que a pasta "videos").'))}p.isMDXComponent=!0}}]);